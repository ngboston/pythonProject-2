#  Завдання 1
#  Створіть функцію, яка повертає всі непарні числа в діапазоні. Функція приймає початок і кінець діапазону
# як параметри. Використовуйте механізм генераторів усередині функції.

print("\n Task 1")

def findN(a,b):
    l = list(filter(lambda x: x%2==0, range(a,b)))
    return l
a=1
b=20
print(f"a={a}, b={b}: {findN(a,b)}")

#   Завдання 2
#  Створіть функцію, яка повертає всі значення зі списку, що не перебувають у діапазоні, зазначеному користувачем.
# Функція приймає список, початок і кінець діапазону як параметри. Використовуйте механізм генераторів усередині
# функції.

print("\n Task 2")

def findN(l,a,b):
    l0 = list(filter(lambda x: (x<=b and x>=a),l))
    return l0
l=[i for i in range(1,20)]
a=2
b=8
print(a,b,findN(l,a,b))

#   Завдання 3
# Для виконання цього завдання обов'язково використовуйте механізм функцій вищого порядку (higher order functions).
# Створіть функцію, що відображає лінію (горизонтальну або вертикальну) з використанням символу, зазначеного
# користувачем. Користувач визначає символ і яку лінію відображати.
# Сигнатура функції:
# def show_line(symbol, function_to_call)
# symbol — символ для відображення.
# function_to_call — функція для відтворення лінії(вертикальна лінія або горизонтальна лінія, на один тип лінії —
# одна функція).

print("\n Task 3")

def function_to_call(l,a):
    if a==True:
        return f"pair is{l%2 == 0}"
    else:
        return f" not pair is {l % 2 == 1}"
def check_value(v,f):
    a=int(input("Pair ? 1 or 0: "))
    return f(v,a)
v = 6
print(f"number: {v} {check_value(v,function_to_call)}")
